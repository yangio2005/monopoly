// Use the following to include this JavaScript file 
// <script src="script1.js"></script>
 const API_KEY = 'AIzaSyBNlOx9WnM65kQMJz1RsvNMiYEZV1GI3Tw'; // Thay th·∫ø b·∫±ng API Key c·ªßa b·∫°n
        const SPREADSHEET_ID = '1wOjdf5Kt2vwbs6Jsf873i96WvQWv9vocqwn1Cswrjus'; // Thay th·∫ø b·∫±ng ID c·ªßa Google Sheets
        const ranges = ['data!A1:E1507', 'ƒêi·ªÉm tr·ª´!A1:E977'];

        async function search() {
            const query = document.getElementById("searchInput").value.trim();
            if (!query) {
                alert("Vui l√≤ng nh·∫≠p MSSV ho·∫∑c t√™n sinh vi√™n!");
                return;
            }

            document.getElementById("results").innerHTML = 
                '<div class="text-center"><div class="spinner-border text-primary" role="status"></div></div>';

            const data = await fetchStudentData();
            if (data) {
                const results = processStudentData(data, query);
                displayResults(results);
            }
        }

        async function fetchStudentData() {
            const url = `https://sheets.googleapis.com/v4/spreadsheets/${SPREADSHEET_ID}/values:batchGet?ranges=${ranges.join('&ranges=')}&key=${API_KEY}`;
            try {
                const response = await fetch(url);
                if (!response.ok) throw new Error("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ Google Sheets");
                
                const result = await response.json();
                return mergeSheetData(result.valueRanges);
            } catch (error) {
                document.getElementById("results").innerHTML = `
                    <div class="alert alert-danger text-center">L·ªói khi t·∫£i d·ªØ li·ªáu: ${error.message}</div>`;
                return null;
            }
        }

        function mergeSheetData(valueRanges) {
            const [dataSheet, deductionSheet] = valueRanges;
            const dataRecords = dataSheet.values || [];
            const deductionRecords = deductionSheet.values || [];
            return { dataRecords, deductionRecords };
        }

        function processStudentData({ dataRecords, deductionRecords }, query) {
            let results = {
                bonusPoints: [],
                deductionPoints: [],
                totalBonus: 0,
                totalDeduction: 0,
                studentInfo: {}
            };

            for (let i = 1; i < dataRecords.length; i++) {
                const [name, mssv, evidence, bonusPoint, activity] = dataRecords[i];
                if (String(name).includes(query) || String(mssv) === query) {
                    results.bonusPoints.push({ activity, bonusPoint });
                    results.totalBonus += Number(bonusPoint) || 0;

                    if (!results.studentInfo.name) {
                        results.studentInfo.name = name;
                        results.studentInfo.mssv = mssv;
                    }
                }
            }

            for (let i = 1; i < deductionRecords.length; i++) {
                const [_, name, mssv, deductionPoint, activity] = deductionRecords[i];
                if (String(name).includes(query) || String(mssv) === query) {
                    results.deductionPoints.push({ activity, deductionPoint: Number(deductionPoint) || 0 });
                    results.totalDeduction += Number(deductionPoint) || 0;
                }
            }

            results.officialScore = results.totalBonus - results.totalDeduction;
            return results;
        }

        function displayResults(results) {
            const resultsDiv = document.getElementById("results");
            if (!results.studentInfo.name) {
                resultsDiv.innerHTML = `<div class="alert alert-warning text-center">Kh√¥ng t√¨m th·∫•y th√¥ng tin sinh vi√™n</div>`;
                return;
            }

            let html = `<div class="result-card">`;
            html += `<div class="card"><div class="card-body">
                        <h5 class="card-title">üéì Th√¥ng tin sinh vi√™n</h5>
                        <p><strong>H·ªç v√† t√™n:</strong> ${results.studentInfo.name}</p>
                        <p><strong>MSSV:</strong> ${results.studentInfo.mssv}</p>
                    </div></div>`;

            html += `<div class="point-section bonus-points">
                        <h5>üìà ƒêi·ªÉm C·ªông</h5>`;
            results.bonusPoints.forEach(item => {
                html += `<div class="activity-item">
                            <span>${item.activity}</span>
                            <span class="badge badge-success">+${item.bonusPoint}</span>
                         </div>`;
            });
            html += `<p class="text-right"><strong>T·ªïng ƒëi·ªÉm c·ªông: <span class="badge badge-success">+${results.totalBonus}</span></strong></p></div>`;

            html += `<div class="point-section deduction-points">
                        <h5>üìâ ƒêi·ªÉm Tr·ª´</h5>`;
            results.deductionPoints.forEach(item => {
                html += `<div class="activity-item">
                            <span>${item.activity}</span>
                            <span class="badge badge-danger">-${item.deductionPoint}</span>
                         </div>`;
            });
            html += `<p class="text-right"><strong>T·ªïng ƒëi·ªÉm tr·ª´: <span class="badge badge-danger">-${results.totalDeduction}</span></strong></p></div>`;

            html += `<div class="total-score">
                        <strong>ƒêi·ªÉm Ch√≠nh Th·ª©c: ${results.officialScore}</strong>
                    </div></div>`;
                    
            resultsDiv.innerHTML = html;
        }
        const notificationRange = 'thongbao!A3:B100'; // Ph·∫°m vi d·ªØ li·ªáu th√¥ng b√°o
/*funtion Th√¥ng b√°o*/
  async function showNotifications() {
    document.getElementById("notificationContent").innerHTML = '<div class="text-center"><div class="spinner-border text-primary" role="status"></div></div>';
    $('#notificationModal').modal('show');
    
    const url = `https://sheets.googleapis.com/v4/spreadsheets/${SPREADSHEET_ID}/values/${notificationRange}?key=${API_KEY}`;
    try {
        const response = await fetch(url);
        if (!response.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i th√¥ng b√°o");

        const result = await response.json();
        const notifications = result.values || [];
        displayNotifications(notifications);
    } catch (error) {
        document.getElementById("notificationContent").innerHTML = `<div class="alert alert-danger text-center">L·ªói khi t·∫£i th√¥ng b√°o: ${error.message}</div>`;
    }
}

  function displayNotifications(notifications) {
    if (notifications.length === 0) {
        document.getElementById("notificationContent").innerHTML = `<div class="text-center text-muted">Kh√¥ng c√≥ th√¥ng b√°o n√†o</div>`;
        return;
    }

    // ƒê·∫£o ng∆∞·ª£c m·∫£ng ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o m·ªõi nh·∫•t ·ªü d∆∞·ªõi c√πng
    notifications.reverse();

    let html = '<ul class="list-group">';
    notifications.forEach(([timestamp, content]) => {
        html += `<li class="list-group-item">
                    <strong>${timestamp}</strong>: ${content}
                 </li>`;
    });
    html += '</ul>';
    document.getElementById("notificationContent").innerHTML = html;
}


//Th√¥ng b√°o//

function toggleReportFields() {
    const reportType = document.getElementById('reportType').value;
    const personalInfoFields = document.getElementById('personalInfoFields');
    if (reportType === 'identified') {
        personalInfoFields.style.display = 'block';
    } else {
        personalInfoFields.style.display = 'none';
    }
}

function submitReport() {
    const reportType = document.getElementById('reportType').value;
    const fullName = document.getElementById('fullName').value.trim();
    const studentId = document.getElementById('studentId').value.trim();
    const reportContent = document.getElementById('reportContent').value.trim();

    if (reportType === 'identified' && (!fullName || !studentId)) {
        alert('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß h·ªç v√† t√™n, MSSV.');
        return;
    }

    if (!reportContent) {
        alert('Vui l√≤ng nh·∫≠p n·ªôi dung b√°o c√°o.');
        return;
    }

    // X·ª≠ l√Ω g·ª≠i b√°o c√°o (v√≠ d·ª•: g·ª≠i ƒë·∫øn server ho·∫∑c l∆∞u tr·ªØ)
    console.log('B√°o c√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i:', { reportType, fullName, studentId, reportContent });

    // ƒê√≥ng modal sau khi g·ª≠i b√°o c√°o
    $('#reportModal').modal('hide');

    // G·ª≠i d·ªØ li·ªáu ƒë·∫øn Webhook
    const webhookUrl = 'https://chat.googleapis.com/v1/spaces/AAAAlcxRv3U/messages?key=AIzaSyDdI0hCZtE6vySjMm-WEfRq3CPzqKqqsHI&token=tLfhDrmn72TLNj-oyorDj57sy7MXNeAPGd9HN-3VAOU';
    const payload = {
        text: `B√°o c√°o m·ªõi:\nLo·∫°i b√°o c√°o: ${reportType}\nH·ªç v√† t√™n: ${fullName}\nMSSV: ${studentId}\nN·ªôi dung b√°o c√°o: ${reportContent}`
    };

    fetch(webhookUrl, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
    })
    .then(response => response.json())
    .then(data => {
        console.log('ƒê√£ g·ª≠i b√°o c√°o ƒë·∫øn Webhook:', data);
        alert('B√°o c√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!');
    })
    .catch(error => {
        console.error('L·ªói khi g·ª≠i b√°o c√°o ƒë·∫øn Webhook:', error);
        alert('ƒê√£ x·∫£y ra l·ªói khi g·ª≠i b√°o c√°o. Vui l√≤ng th·ª≠ l·∫°i!');
    });

    // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
    const successMessage = document.getElementById('successMessage');
    successMessage.style.display = 'block';

    // ·∫®n th√¥ng b√°o sau 5 gi√¢y
    setTimeout(() => {
        successMessage.style.display = 'none';
    }, 5000);
}
